// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dmulti_double
double dmulti_double(IntegerVector x, NumericVector prob, bool log_p);
RcppExport SEXP _ldsep_dmulti_double(SEXP xSEXP, SEXP probSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(dmulti_double(x, prob, log_p));
    return rcpp_result_gen;
END_RCPP
}
// probgeno
double probgeno(int gA, int gB, int K, NumericVector prob, bool log_p);
RcppExport SEXP _ldsep_probgeno(SEXP gASEXP, SEXP gBSEXP, SEXP KSEXP, SEXP probSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type gA(gASEXP);
    Rcpp::traits::input_parameter< int >::type gB(gBSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(probgeno(gA, gB, K, prob, log_p));
    return rcpp_result_gen;
END_RCPP
}
// proballgeno
double proballgeno(IntegerVector gA, IntegerVector gB, int K, NumericVector prob, bool log_p);
RcppExport SEXP _ldsep_proballgeno(SEXP gASEXP, SEXP gBSEXP, SEXP KSEXP, SEXP probSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type gA(gASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gB(gBSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(proballgeno(gA, gB, K, prob, log_p));
    return rcpp_result_gen;
END_RCPP
}
// llike_geno
double llike_geno(NumericVector par, IntegerVector gA, IntegerVector gB, int K);
RcppExport SEXP _ldsep_llike_geno(SEXP parSEXP, SEXP gASEXP, SEXP gBSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type par(parSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gA(gASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type gB(gBSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(llike_geno(par, gA, gB, K));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_exp
double log_sum_exp(NumericVector x);
RcppExport SEXP _ldsep_log_sum_exp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp(x));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_exp_2
double log_sum_exp_2(double x, double y);
RcppExport SEXP _ldsep_log_sum_exp_2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp_2(x, y));
    return rcpp_result_gen;
END_RCPP
}
// logit
double logit(double x);
RcppExport SEXP _ldsep_logit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(x));
    return rcpp_result_gen;
END_RCPP
}
// expit
double expit(double x);
RcppExport SEXP _ldsep_expit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(expit(x));
    return rcpp_result_gen;
END_RCPP
}
// real_to_simplex
NumericVector real_to_simplex(NumericVector y);
RcppExport SEXP _ldsep_real_to_simplex(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(real_to_simplex(y));
    return rcpp_result_gen;
END_RCPP
}
// simplex_to_real
NumericVector simplex_to_real(NumericVector x);
RcppExport SEXP _ldsep_simplex_to_real(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(simplex_to_real(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ldsep_dmulti_double", (DL_FUNC) &_ldsep_dmulti_double, 3},
    {"_ldsep_probgeno", (DL_FUNC) &_ldsep_probgeno, 5},
    {"_ldsep_proballgeno", (DL_FUNC) &_ldsep_proballgeno, 5},
    {"_ldsep_llike_geno", (DL_FUNC) &_ldsep_llike_geno, 4},
    {"_ldsep_log_sum_exp", (DL_FUNC) &_ldsep_log_sum_exp, 1},
    {"_ldsep_log_sum_exp_2", (DL_FUNC) &_ldsep_log_sum_exp_2, 2},
    {"_ldsep_logit", (DL_FUNC) &_ldsep_logit, 1},
    {"_ldsep_expit", (DL_FUNC) &_ldsep_expit, 1},
    {"_ldsep_real_to_simplex", (DL_FUNC) &_ldsep_real_to_simplex, 1},
    {"_ldsep_simplex_to_real", (DL_FUNC) &_ldsep_simplex_to_real, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ldsep(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
