j=dtri(0.74, 0.9)
k=dtri(0.74, 1)
liklihoods6 <- c(a, b, c, d, e, f, g, h, i, j, k)
probB <- sum(liklihoods6 * posterior5)
posterior6 <- liklihoods6 * posterior5 / probB
plot(m, posterior6)
a=dtri(0.79, 0)
b=dtri(0.79, 0.1)
c=dtri(0.79, 0.2)
d=dtri(0.79, 0.3)
e=dtri(0.79, 0.4)
f=dtri(0.79, 0.5)
g=dtri(0.79, 0.6)
h=dtri(0.79, 0.7)
i=dtri(0.79, 0.8)
j=dtri(0.79, 0.9)
k=dtri(0.79, 1)
a=dtri(0.79, 0)
b=dtri(0.79, 0.1)
c=dtri(0.79, 0.2)
d=dtri(0.79, 0.3)
e=dtri(0.79, 0.4)
f=dtri(0.79, 0.5)
g=dtri(0.79, 0.6)
h=dtri(0.79, 0.7)
i=dtri(0.79, 0.8)
j=dtri(0.79, 0.9)
k=dtri(0.79, 1)
liklihoods7 <- c(a, b, c, d, e, f, g, h, i, j, k)
probB <- sum(liklihoods7 * posterior6)
posterior7 <- liklihoods7 * posterior6 / probB
plot(m, posterior7)
a=dtri(0.8, 0)
b=dtri(0.8, 0.1)
c=dtri(0.8, 0.2)
d=dtri(0.8, 0.3)
e=dtri(0.8, 0.4)
f=dtri(0.8, 0.5)
g=dtri(0.8, 0.6)
h=dtri(0.8, 0.7)
i=dtri(0.8, 0.8)
j=dtri(0.8, 0.9)
k=dtri(0.8, 1)
liklihoods8 <- c(a, b, c, d, e, f, g, h, i, j, k)
probB <- sum(liklihoods8 * posterior7)
posterior8 <- liklihoods8 * posterior7 / probB
plot(m, posterior8)
a=dtri(0.87, 0)
b=dtri(0.87, 0.1)
c=dtri(0.87, 0.2)
d=dtri(0.87, 0.3)
e=dtri(0.87, 0.4)
f=dtri(0.87, 0.5)
g=dtri(0.87, 0.6)
h=dtri(0.87, 0.7)
i=dtri(0.87, 0.8)
j=dtri(0.87, 0.9)
k=dtri(0.87, 1)
liklihoods9 <- c(a, b, c, d, e, f, g, h, i, j, k)
probB <- sum(liklihoods9 * posterior8)
posterior9 <- liklihoods9 * posterior8 / probB
plot(m, posterior9)
a=dtri(0.93, 0)
b=dtri(0.93, 0.1)
c=dtri(0.93, 0.2)
d=dtri(0.93, 0.3)
e=dtri(0.93, 0.4)
f=dtri(0.93, 0.5)
g=dtri(0.93, 0.6)
h=dtri(0.93, 0.7)
i=dtri(0.93, 0.8)
j=dtri(0.93, 0.9)
k=dtri(0.93, 1)
liklihoods10 <- c(a, b, c, d, e, f, g, h, i, j, k)
probB <- sum(liklihoods10 * posterior9)
posterior10 <- liklihoods10 * posterior9 / probB
plot(m, posterior10)
plot(m, posterior10, type = 'l')
m <- seq.int(0,100)
m
m <- m / sum(m)
m
m <- seq.int(0,1, by = 0.01)
m
length(m)
prior <- rep(1, 101)
prior
prior <- rep(1, 101) / 101
prior
liklihood <- dtri(dat, m)
dtri(dat)
dtri(dat, m = 0.5)
dbinom(6, 9, prob = m)
print(i)
for (i in seq.int(1, 101)) {
print(i)
}
for (i in seq.int(1, 101)) {
like <- dtri(dat, m[i])
print(like)
}
prior <- rep(1, 101) / 101
prior
for (i in seq.int(1, 101)) {
liklihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
liklihoods <- append(liklihoods, like)
}
probB <- sum(liklihoods * prior)
prior <- liklihoods * prior / probB
}
prior
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (i in seq.int(1, 101)) {
liklihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
liklihoods <- append(liklihoods, like)
}
probB <- sum(liklihoods * prior)
prior <- liklihoods * prior / probB
}
prior
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
liklihoods <- append(likelihoods, like)
}
print(length(likelihoods))
probB <- sum(liklihoods * prior)
prior <- likelihoods * prior / probB
}
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
liklihoods <- append(likelihoods, like)
print(liklihoods)
}
probB <- sum(liklihoods * prior)
prior <- likelihoods * prior / probB
}
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
likelihoods <- append(likelihoods, like)
}
probB <- sum(liklihoods * prior)
prior <- likelihoods * prior / probB
}
prior
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
likelihoods <- append(likelihoods, like)
}
probB <- sum(liklihoods * prior)
prior <- likelihoods * prior / probB
}
prior
plot(m, prior)
prior
prior <- rep(1, 101) / 101
plot(prior)
## Observed data, assumed independent
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
m
prior
m[1]
prior[1]
prior
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
likelihoods <- append(likelihoods, like)
}
probB <- sum(liklihoods * prior)
prior <- likelihoods * prior / probB
}
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
likelihoods <- append(likelihoods, like)
}
probB <- sum(liklihoods * prior)
prior <- likelihoods * prior / probB
}
for (i in seq.int(1, 101)) {
likelihoods <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
likelihoods <- append(likelihoods, like)
}
probB <- sum(likelihoods * prior)
prior <- likelihoods * prior / probB
}
plot(prior)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (i in seq.int(1, 101)) {
lh <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(prior)
plot(m, prior)
append(prior, 1)
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
## Observed data, assumed independent
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (i in seq.int(1, 2)) {
lh <- c()
for (j in seq.int(1, 10)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
print(lh)
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
for (j in seq.int(1, 10)) {
lh <- c()
for (j in seq.int(1, 101)) {
like <- dtri(dat[j], m[j])
lh <- append(lh, like)
}
print(lh)
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
## Observed data, assumed independent
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (j in seq.int(1, 10)) {
lh <- c()
for (i in seq.int(1, 101)) {
like <- dtri(dat[j], m[j])
lh <- append(lh, like)
}
print(lh)
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
prior
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
## Observed data, assumed independent
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (j in seq.int(1, 10)) {
lh <- c()
for (i in seq.int(1, 101)) {
like <- dtri(dat[j], m[j])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
prior
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
## Observed data, assumed independent
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (j in seq.int(1, 10)) {
lh <- c()
for (i in seq.int(1, 101)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
prior
plot(m, prior)
plot(m, prior, type = "l")
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
m <- seq.int(0,1, by = 0.01)
prior <- rep(1, 101) / 101
for (j in seq.int(1, 10)) {
lh <- c()
for (i in seq.int(1, 101)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
m <- seq.int(0,1, by = 0.01)
m
length(m)
m <- seq.int(0,1, length.out = 101)
m
datalen <- length(dat)
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
mlen <- 101
datalen <- length(dat)
m <- seq.int(0,1, length.out = mlen)
prior <- rep(1, mlen) / mlen
for (j in seq.int(1, datalen)) {
lh <- c()
for (i in seq.int(1, mlen)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
mlen <- 10
datalen <- length(dat)
m <- seq.int(0,1, length.out = mlen)
prior <- rep(1, mlen) / mlen
for (j in seq.int(1, datalen)) {
lh <- c()
for (i in seq.int(1, mlen)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
mlen <- 101
mlen <- 1000
datalen <- length(dat)
m <- seq.int(0,1, length.out = mlen)
prior <- rep(1, mlen) / mlen
for (j in seq.int(1, datalen)) {
lh <- c()
for (i in seq.int(1, mlen)) {
like <- dtri(dat[j], m[i])
lh <- append(lh, like)
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
## Triangle density
dtri <- function(x, m = 0.5) {
stopifnot(m >= 0, m <= 1, length(m) == 1)
d <- ifelse(x < m, 2 * x / m, 2 / (1 - m) - 2 * x / (1 - m))
d[x < 0 | x > 1] <- 0
return(d)
}
dat <- c(0.01, 0.26, 0.69, 0.72, 0.73, 0.74, 0.79, 0.8, 0.87, 0.93)
mlen <- 1000
datalen <- length(dat)
m <- seq.int(0,1, length.out = mlen)
prior <- rep(1, mlen) / mlen
for (j in seq.int(1, datalen)) {
lh <- rep(NA, mlen)
for (i in seq.int(1, mlen)) {
lh[i] <- dtri(dat[j], m[i])
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
mlen <- 10000
datalen <- length(dat)
m <- seq.int(0,1, length.out = mlen)
prior <- rep(1, mlen) / mlen
for (j in seq.int(1, datalen)) {
lh <- rep(NA, mlen)
for (i in seq.int(1, mlen)) {
lh[i] <- dtri(dat[j], m[i])
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
mlen <- 15
datalen <- length(dat)
m <- seq.int(0,1, length.out = mlen)
prior <- rep(1, mlen) / mlen
for (j in seq.int(1, datalen)) {
lh <- rep(NA, mlen)
for (i in seq.int(1, mlen)) {
lh[i] <- dtri(dat[j], m[i])
}
probB <- sum(lh * prior)
prior <- lh * prior / probB
}
plot(m, prior, type = "l")
prior
prior
prior <- rep(1, mlen) / mlen
prior
install.packages("hexbin")
remove.packages("hexbin")
print("Hello World")
print("Hello World!")
print("hello geom_hex")
devtools::load_all(path = "~/Genomics/ldsep/")
devtools::load_all(path = "~/Genomics/ldsep/")
library(updog)
library(VariantAnnotation)
file <- "~/Documents/DavidSimulation/data/uit/NewPlusOldCalls.headed.vcf"
uit <- readVcf(file)
file <- "~/Documents/DavidSimulation/data/uit/NewPlusOldCalls.headed.vcf"
uit <- readVcf(file)
uit <- readVcf(file)
uit
uit <- readVcf(file)
uit
ChromDF <- data.frame(chrom = seqnames(rowRanges(uit)))
ChromDF$row_num <- seq.int(nrow(ChromDF))
chrom <- "PGSC0003DMB000000001"
indicies <- start(ranges(rowRanges(uit)))[(min(ChromDF[ChromDF$chrom == chrom, ][['row_num']])):(max(ChromDF[ChromDF$chrom == chrom, ][['row_num']]))]
length(indicies)
subindicies <- indicies
rng <- GRanges(seqnames = chrom, paste0(min(subindicies),"..", max(subindicies)))
param <- ScanVcfParam(which = rng)
compressVcf <- bgzip("~/Documents/DavidSimulation/data/uit/NewPlusOldCalls.headed.vcf", tempfile())
tab <- indexVcf(compressVcf)
tab <- indexVcf(compressVcf)
subuit <- readVcf(tab,genome = "h", param)
subuit
position <- ranges(subuit)
posFrame <- data.frame(row.names = names(position), pos = start(position))
sizemat <- geno(subuit)$DP
refmat <- geno(subuit)$RA
ploidy <- 4
mout <- multidog(refmat = refmat,
sizemat = sizemat,
ploidy = ploidy,
model = "norm")
getwd
getwd()
getwd
setwd("~/Genomics/ldsep/")
x <- c("A", "B", "C")
attributes(x)
factor(x)
x <- factor(x)
attributes(x)
unclass(x)
class(x)
class(x) <- "low"
class(x)
sloop::s3_class(x)
class(mtcars)
