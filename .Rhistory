}
else {
df[['r2v']][i] = median(cldf[cldf[['dist']] == df[['dist']][i],][['r2']])
}
}
}
else {
print("not ready yet")
}
df
}
devtools::load_all(path = "~/Genomics/ldsep/")
library(updog)
library(VariantAnnotation)
library(ggplot2)
uit_file <- system.file("extdata", "subuit.vcf",
package = "ldsep",
mustWork = TRUE)
subuit <- readVcf(file = uit_file)
position <- ranges(subuit)
posFrame <- data.frame(row.names = names(position), pos = start(position))
sizemat <- geno(subuit)$DP
refmat <- geno(subuit)$RA
ploidy <- 4
mout <- multidog(refmat = refmat,
sizemat = sizemat,
ploidy = ploidy,
model = "norm")
## msub <- filter_snp(x = mout, pmax(Pr_0, Pr_1, Pr_2, Pr_3, Pr_4) < 0.95)
varnames <- paste0("logL_", 0:ploidy)
glarray <- format_multidog(x = mout, varname = varnames)
gparray <- gl_to_gp(glarray)
ldout <- ldfast(gp = gparray, loc = posFrame$pos, type = "r2", chrom = rep(c(1, 2, 1), 7))
sample <- chromLoop(ldout)
ldDecPrep(sample, combineChrom = TRUE)
ldDecPrep(sample, combineChrom = TRUE, method = "mean")
ldDecPrep(sample, combineChrom = TRUE, method = "median")
sample
unique(sample[['dist']])
unique(sample[['dist']])
unique(sample[['dist', 'chrom']])
unique(sample[['dist']])
unique(paste(sample[['dist']], sample[['chrom']]))
sample[['dist', 'chrom']]
sample[['dist']]
sample[['chrom']]
sample[['dist' && 'chrom']]
devtools::load_all(path = "~/Genomics/ldsep/")
# we have to combine
chromLoopDF <- chromLoopDC
devtools::load_all(path = "~/Genomics/ldsep/")
ldout
plot_ld(ldout)
sample
ldDecPrep(sample, combineChrom = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout, distinctChromPlot = FALSE)
sample
sample2 <- ldDecPrep(sample, combineChrom = TRUE, method = "median")
sample2
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
chromLoopDC(ldout)
chromLoopDC(ldout)
devtools::load_all(path = "~/Genomics/ldsep/")
chromLoopDC(ldout)
devtools::load_all(path = "~/Genomics/ldsep/")
chromLoopDC(ldout)
plot_ld(ldout = ldout, distinctChromPlot = TRUE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = TRUE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = TRUE)
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
plot_ld(ldout = ldout, distinctChromPlot = TRUE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
devtools::load_all(path = "~/Genomics/ldsep/")
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = FALSE)
# lets simulate some stuff
x <- seq(1, 300) + abs(rnorm(300, sd = 100))
y <- 2 * x^2 + log(x) + rnorm(300, sd = 100000)
qplot(x = x, y = y)
plot_ld(ldout = ldout, distinctChromPlot = TRUE)
devtools::load_all(path = "~/Genomics/ldsep/")
plot_ld(ldout = ldout, distinctChromPlot = TRUE)
ldout
getwd()
file.edit("ldplot.R")
readinss(ldout$ldmat, ldout$loc, 1)
findDist(ldout$ldmat, ldout$loc, 1)
readinss(ldout$ldmat, ldout$loc, 1)
findDist(ldout$ldmat, ldout$loc, 1)
readinss(ldout$ldmat, ldout$loc, 1)
findDist(ldout$ldmat, ldout$loc, 1)
findDist(ldout$ldmat, ldout$loc, 1)
readinss(ldout$ldmat, ldout$loc, 1)
findDistT <- function(ldmat, loci, chrom, poolChrom = TRUE) {
nr <- nrow(ldmat)
nc <- ncol(ldmat)
ov <- rep(NA, (nr - 1) * (nc - 1)) # r2 for ov
ov2 <- ov # dist for ov2
for (i in seq(1, nr - 1)) {
for (j in seq(i + 1, nc)) {
ov[nc * (i - 1) + (j - i)] = ldmat[i, j] ## r2 values
ov2[nc * (i - 1) + (j - i)] = abs(loci[i] - loci[j]) ## dist b/w loci in bp
}
}
nao <- is.na(ov)
ovn <- ov[!nao]
ovn2 <- ov2[!nao]
if (poolChrom) {
opdf <- data.frame(chrom, dist = ovn2, r2 = ovn)
}
else {
uniqueDist <- base::unique(ovn2)
obs <- rep(NA, length(uniqueDist))
r2v <- rep(NA, length(uniqueDist))
for (i in seq(1, length(uniqueDist))) {
r2v[i] = mean(ovn[ovn2 == uniqueDist[i]])
obs[i] = length(ovn[ovn2 == uniqueDist[i]])
}
opdf <- data.frame(chrom, dist = uniqueDist, r2v, obs)
}
opdf
}
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
findDist(ldout$ldmat, ldout$loc, 1)
readinss(ldout$ldmat, ldout$loc, 1)
bench::mark(findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE), readinss(ldout$ldmat, ldout$loc, 1))
bench::mark(findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE), readinss(ldout$ldmat, ldout$loc, 1))
bench::mark(findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = TRUE), findDist(ldout$ldmat, ldout$loc, 1))
bench::mark(findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = TRUE), findDist(ldout$ldmat, ldout$loc, 1))
chromLoopN <- function(ldout, poolChrom = TRUE) {
stopifnot(!is.null(obj$ldmat), !is.null(obj$loc))
allchrom = rep(1)
chromSupplied = !is.null(obj$chrom)
if (chromSupplied) {
allchrom = base::unique(obj$chrom) ## find all chroms
}
opframe = data.frame(chrom = c(), dist = c(), r2v = c(), obs = c())
if (poolChrom) {
if (chromSupplied) {
for (i in allchrom) {
bChrom = (obj$chrom == i)
opframe = rbind(opframe, findDistT(ldmat = obj$ldmat[bChrom, bChrom], loci = obj$loc[bChrom], chrom = i, poolChrom = TRUE))
}
}
else {
opframe = rbind(opframe, findDistT(ldmat = obj$ldmat, loci = obj$loc, chrom = NA, poolChrom = TRUE))
}
}
else { ## not pool chromed
if (chromSupplied) {
for (i in allchrom) {
bChrom = (obj$chrom == i)
opframe = rbind(opframe, findDistT(ldmat = obj$ldmat[bChrom, bChrom], loci = obj$loc[bChrom], chrom = i, poolChrom = FALSE))
}
}
else {
opframe = rbind(opframe, findDistT(ldmat = obj$ldmat, loci = obj$loc, chrom = NA, poolChrom = FALSE))
}
}
opframe
}
chromLoopN(ldout = ldout, poolChrom = TRUE)
chromLoopN <- function(ldout, poolChrom = TRUE) {
stopifnot(!is.null(ldout$ldmat), !is.null(ldout$loc))
allchrom = rep(1)
chromSupplied = !is.null(ldout$chrom)
if (chromSupplied) {
allchrom = base::unique(ldout$chrom) ## find all chroms
}
opframe = data.frame(chrom = c(), dist = c(), r2v = c(), obs = c())
if (poolChrom) {
if (chromSupplied) {
for (i in allchrom) {
bChrom = (ldout$chrom == i)
opframe = rbind(opframe, findDistT(ldmat = ldout$ldmat[bChrom, bChrom], loci = ldout$loc[bChrom], chrom = i, poolChrom = TRUE))
}
}
else {
opframe = rbind(opframe, findDistT(ldmat = ldout$ldmat, loci = ldout$loc, chrom = NA, poolChrom = TRUE))
}
}
else { ## not pool chromed
if (chromSupplied) {
for (i in allchrom) {
bChrom = (ldout$chrom == i)
opframe = rbind(opframe, findDistT(ldmat = ldout$ldmat[bChrom, bChrom], loci = ldout$loc[bChrom], chrom = i, poolChrom = FALSE))
}
}
else {
opframe = rbind(opframe, findDistT(ldmat = ldout$ldmat, loci = ldout$loc, chrom = NA, poolChrom = FALSE))
}
}
opframe
}
chromLoopN(ldout = ldout, poolChrom = TRUE)
chromLoopN(ldout = ldout, poolChrom = FALSE)
chromLoopN(ldout = ldout, poolChrom = TRUE)
chromLoopN(ldout = ldout, poolChrom = FALSE)
max(chromLoopN(ldout = ldout, poolChrom = FALSE)$obs)
chromLoopN(ldout = ldout, poolChrom = FALSE)$obs
chromLoopN(ldout = ldout, poolChrom = FALSE)
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
ldout$chrom
length(ldout$chrom)
ldout$chrom = rep(1, 21)
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
chromLoopN(ldout = ldout, poolChrom = FALSE)
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
chromLoopN(ldout = ldout, poolChrom = FALSE)
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
chromLoopN(ldout = ldout, poolChrom = FALSE)
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = TRUE)
findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
#' ldDecPrep
#'
#' @param cldf Dataframe containing good data.
#'
#' @export
ldDecPrepN <- function(cldf, combineChrom = TRUE, method = c("mean", "median")) {
dfnrow = nrow(cldf)
if (combineChrom) {
df <- data.frame(dist = unique(cldf[['dist']]), r2v = rep(NA, length(unique(cldf[['dist']]))))
for (i in seq(1, nrow(df))) {
if (method == "mean") {
df[['r2v']][i] = mean(cldf[cldf[['dist']] == df[['dist']][i],][['r2']])
}
else {
df[['r2v']][i] = median(cldf[cldf[['dist']] == df[['dist']][i],][['r2']])
}
}
}
else {
print("not ready yet")
df = NULL
}
df
}
sample1 <- findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = FALSE)
sample1
sample2 <- findDistT(ldout$ldmat, ldout$loc, 1, poolChrom = TRUE)
sample2
ldDecPrep(cldf = sample2, combineChrom = TRUE, method = "mean")
sample3 <- ldDecPrep(cldf = sample2, combineChrom = TRUE, method = "mean")
sample3
bench::mark(sample3, sample1)
sample1
sample3
bench::mark(sample1$r2v, sample3$r2v)
ldPlotN <- function(ldout, combineChrom = TRUE) {
if (combineChrom) {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
}
else {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
}
print(df2)
}
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (combineChrom) {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
for (i in unique(df2$chrom)) {
buffDF = chromLoopDF[chromLoopDF[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF)
#        ggplot2::geom_line(ggplot2::aes(x = buffDF$dist, y = buffDF$spline)) +
#        ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i)) +
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
else {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2)
}
p
}
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2)
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
for (i in unique(df2$chrom)) {
buffDF = chromLoopDF[chromLoopDF[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF)
#        ggplot2::geom_line(ggplot2::aes(x = buffDF$dist, y = buffDF$spline)) +
#        ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i)) +
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
p
}
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = chromLoopDF[chromLoopDF[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF)
#        ggplot2::geom_line(ggplot2::aes(x = buffDF$dist, y = buffDF$spline)) +
#        ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i)) +
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2)
}
p
}
ldPlotN(ldout, combineChrom = FALSE)
chromLoopN(ldout, poolChrom = FALSE)
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = df2[df2[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF)
#        ggplot2::geom_line(ggplot2::aes(x = buffDF$dist, y = buffDF$spline)) +
#        ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i)) +
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2)
}
p
}
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = df2[df2[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black")
#        ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i)) +
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline))
}
p
}
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = df2[df2[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black")
#        ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i)) +
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black")
}
p
}
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = df2[df2[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black") +
ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i))
#        ggplot2::geom_hline(yintercept = ldThreshold, colour = "blue", alpha = 0.5)
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black") +
ggplot2::theme_bw() + ggplot2::labs(title = "LDdecay Plot")
}
p
}
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN(ldout, combineChrom = TRUE)
ldPlotN <- function(ldout, combineChrom = TRUE) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = df2[df2[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black") +
ggplot2::geom_hline(yintercept = ldThresh, colour = "blue", alpha = 0.5) +
ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i))
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black") +
ggplot2::geom_hline(yintercept = ldThresh, colour = "blue", alpha = 0.5) +
ggplot2::theme_bw() + ggplot2::labs(title = "LDdecay Plot")
}
return(p)
}
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN <- function(ldout, combineChrom = TRUE, ldThresh = 0.2) {
p <- list()
if (!combineChrom) {
df2 <- chromLoopN(ldout, poolChrom = FALSE)
for (i in unique(df2$chrom)) {
buffDF = df2[df2[['chrom']] == i,]
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = buffDF)
buffDF$spline <- scam::predict.scam(scamp)
p[[i]] = ggplot2::qplot(x = dist, y = r2v, data = buffDF) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black") +
ggplot2::geom_hline(yintercept = ldThresh, colour = "blue", alpha = 0.5) +
ggplot2::theme_bw() + ggplot2::labs(title = paste("LDdecay Plot for Chrom", i))
}
}
else {
df1 <- chromLoopN(ldout, poolChrom = TRUE)
df2 <- ldDecPrepN(df1, combineChrom = TRUE, method = "mean")
scamp <- scam::scam(formula = r2v~s(dist, bs = "mdcx"), data = df2)
df2$spline <- scam::predict.scam(scamp)
p[[1]] = ggplot2::qplot(x = dist, y = r2v, data = df2) +
ggplot2::geom_line(ggplot2::aes(x = dist, y = spline), colour = "black") +
ggplot2::geom_hline(yintercept = ldThresh, colour = "blue", alpha = 0.5) +
ggplot2::theme_bw() + ggplot2::labs(title = "LDdecay Plot")
}
return(p)
}
ldPlotN(ldout, combineChrom = FALSE)
ldPlotN(ldout, combineChrom = TRUE)
